package org.openmetadatainitiative.openminds.latest.publications;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.publications.Periodical;


import static org.openmetadatainitiative.openminds.latest.publications.PublicationVolume.*;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PublicationVolume extends Instance implements org.openmetadatainitiative.openminds.latest.publications.intf.ScholarlyArticleIsPartOf{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/publications/PublicationVolume";

    @JsonIgnore
    public Reference<PublicationVolume> getReference() {
        return doGetReference();
    }

    public static Reference<PublicationVolume> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private PublicationVolume(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<PublicationVolume>{
        
        public Builder isPartOf(Reference<Periodical> isPartOf) { PublicationVolume.this.isPartOf = isPartOf; return this; }
        
        public Builder volumeNumber(String volumeNumber) { PublicationVolume.this.volumeNumber = volumeNumber; return this; }
        

        public PublicationVolume build() {
            if (PublicationVolume.this.id == null) {
                PublicationVolume.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(PublicationVolume.this.types == null || PublicationVolume.this.types.isEmpty() || !PublicationVolume.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = PublicationVolume.this.types;
                PublicationVolume.this.types = new ArrayList<>();
                PublicationVolume.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    PublicationVolume.this.types.addAll(oldValues);
                }
            }
            return PublicationVolume.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/isPartOf")
    private Reference<Periodical> isPartOf;
    
    /**
    * Reference to the ensemble of multiple things or beings.
    */
    public Reference<Periodical> getIsPartOf() {
       return this.isPartOf;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/volumeNumber")
    private String volumeNumber;
    
    public String getVolumeNumber() {
       return this.volumeNumber;
    }

 
    public static PublicationVolume.Builder create(LocalId localId){
        return new PublicationVolume(localId).new Builder();
    }

    public PublicationVolume.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, PublicationVolume.class).new Builder();
    }
}