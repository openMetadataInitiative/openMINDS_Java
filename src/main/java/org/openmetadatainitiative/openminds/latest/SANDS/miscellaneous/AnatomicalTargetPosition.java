package org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.CoordinatePoint;
import org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.intf.AnatomicalTargetPositionAnatomicalTarget;
import org.openmetadatainitiative.openminds.latest.controlledTerms.AnatomicalIdentificationType;


import static org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.AnatomicalTargetPosition.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class AnatomicalTargetPosition extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity{
    public static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/sands/AnatomicalTargetPosition";

    @JsonIgnore
    public Reference<AnatomicalTargetPosition> getReference() {
        return doGetReference();
    }

    public static Reference<AnatomicalTargetPosition> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private AnatomicalTargetPosition() {
        this(null);
    }

    private AnatomicalTargetPosition(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    
    public class EmbeddedBuilder {

        public EmbeddedBuilder additionalRemarks(String additionalRemarks) { AnatomicalTargetPosition.this.additionalRemarks = additionalRemarks; return this; }
        public EmbeddedBuilder anatomicalTarget(List<Reference<? extends AnatomicalTargetPositionAnatomicalTarget>> anatomicalTarget) { AnatomicalTargetPosition.this.anatomicalTarget = anatomicalTarget; return this; }
        public EmbeddedBuilder spatialLocation(List<Function<CoordinatePoint.EmbeddedBuilder, CoordinatePoint>> spatialLocation) { AnatomicalTargetPosition.this.spatialLocation = spatialLocation.stream().map(b -> b.apply(CoordinatePoint.createEmbedded())).toList(); return this; }
        public EmbeddedBuilder targetIdentificationType(Reference<AnatomicalIdentificationType> targetIdentificationType) { AnatomicalTargetPosition.this.targetIdentificationType = targetIdentificationType; return this; }
        

        public AnatomicalTargetPosition build(){
            return AnatomicalTargetPosition.this;
        }
    }

    public static AnatomicalTargetPosition.EmbeddedBuilder createEmbedded(){
        return new AnatomicalTargetPosition(null).new EmbeddedBuilder();
    }
    

    

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/additionalRemarks")
    private String additionalRemarks;
    
    /**
    * Mention of what deserves additional attention or notice.
    */
    public String getAdditionalRemarks() {
       return this.additionalRemarks;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/anatomicalTarget")
    private List<Reference<? extends AnatomicalTargetPositionAnatomicalTarget>> anatomicalTarget;
    
    public List<Reference<? extends AnatomicalTargetPositionAnatomicalTarget>> getAnatomicalTarget() {
       return this.anatomicalTarget;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/spatialLocation")
    private List<CoordinatePoint> spatialLocation;
    
    public List<CoordinatePoint> getSpatialLocation() {
       return this.spatialLocation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/targetIdentificationType")
    private Reference<AnatomicalIdentificationType> targetIdentificationType;
    
    public Reference<AnatomicalIdentificationType> getTargetIdentificationType() {
       return this.targetIdentificationType;
    }

 

}