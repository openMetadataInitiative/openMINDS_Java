package org.openmetadatainitiative.openminds.latest.SANDS.mathematicalShapes;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.miscellaneous.QuantitativeValue;


import static org.openmetadatainitiative.openminds.latest.SANDS.mathematicalShapes.Ellipse.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class Ellipse extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity, org.openmetadatainitiative.openminds.latest.specimenPrep.activity.intf.CranialWindowPreparationDimension{
    public static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/sands/Ellipse";

    @JsonIgnore
    public Reference<Ellipse> getReference() {
        return doGetReference();
    }

    public static Reference<Ellipse> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private Ellipse() {
        this(null);
    }

    private Ellipse(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    
    public class EmbeddedBuilder {

        public EmbeddedBuilder semiMajorAxis(Function<QuantitativeValue.EmbeddedBuilder, QuantitativeValue> semiMajorAxis) { Ellipse.this.semiMajorAxis = semiMajorAxis.apply(QuantitativeValue.createEmbedded()); return this; }
        public EmbeddedBuilder semiMinorAxis(Function<QuantitativeValue.EmbeddedBuilder, QuantitativeValue> semiMinorAxis) { Ellipse.this.semiMinorAxis = semiMinorAxis.apply(QuantitativeValue.createEmbedded()); return this; }
        

        public Ellipse build(){
            return Ellipse.this;
        }
    }

    public static Ellipse.EmbeddedBuilder createEmbedded(){
        return new Ellipse(null).new EmbeddedBuilder();
    }
    

    

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/semiMajorAxis")
    private QuantitativeValue semiMajorAxis;
    
    public QuantitativeValue getSemiMajorAxis() {
       return this.semiMajorAxis;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/semiMinorAxis")
    private QuantitativeValue semiMinorAxis;
    
    public QuantitativeValue getSemiMinorAxis() {
       return this.semiMinorAxis;
    }

 

}