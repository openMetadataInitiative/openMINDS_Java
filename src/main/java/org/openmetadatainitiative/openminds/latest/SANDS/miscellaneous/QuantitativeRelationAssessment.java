package org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.SANDS.atlas.ParcellationEntityVersion;
import org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.intf.QuantitativeRelationAssessmentQuantitativeOverlap;
import org.openmetadatainitiative.openminds.latest.core.research.ProtocolExecution;


import static org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.QuantitativeRelationAssessment.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class QuantitativeRelationAssessment extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity, org.openmetadatainitiative.openminds.latest.SANDS.atlas.intf.ParcellationEntityVersionRelationAssessment, org.openmetadatainitiative.openminds.latest.SANDS.nonatlas.intf.CustomAnatomicalEntityRelationAssessment{
    public static final String SEMANTIC_NAME = "https://openminds.om-i.org/types/QuantitativeRelationAssessment";

    @JsonIgnore
    public Reference<QuantitativeRelationAssessment> getReference() {
        return doGetReference();
    }

    public static Reference<QuantitativeRelationAssessment> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private QuantitativeRelationAssessment() {
        this(null);
    }

    private QuantitativeRelationAssessment(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    
    public class EmbeddedBuilder {

        public EmbeddedBuilder criteria(Reference<ProtocolExecution> criteria) { QuantitativeRelationAssessment.this.criteria = criteria; return this; }
        public EmbeddedBuilder inRelationTo(Reference<ParcellationEntityVersion> inRelationTo) { QuantitativeRelationAssessment.this.inRelationTo = inRelationTo; return this; }
        public EmbeddedBuilder quantitativeOverlap(Function<QuantitativeRelationAssessmentQuantitativeOverlap.EmbeddedBuilder, QuantitativeRelationAssessmentQuantitativeOverlap> quantitativeOverlap) { QuantitativeRelationAssessment.this.quantitativeOverlap = quantitativeOverlap.apply(QuantitativeRelationAssessmentQuantitativeOverlap.createEmbedded()); return this; }
        

        public QuantitativeRelationAssessment build(){
            return QuantitativeRelationAssessment.this;
        }
    }

    public static QuantitativeRelationAssessment.EmbeddedBuilder createEmbedded(){
        return new QuantitativeRelationAssessment(null).new EmbeddedBuilder();
    }
    

    

   @JsonProperty(value = "https://openminds.om-i.org/props/criteria")
    private Reference<ProtocolExecution> criteria;
    
    /**
    * Aspects or standards on which a judgement or decision is based.
    */
    public Reference<ProtocolExecution> getCriteria() {
       return this.criteria;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/inRelationTo")
    private Reference<ParcellationEntityVersion> inRelationTo;
    
    /**
    * Reference to a related element.
    */
    public Reference<ParcellationEntityVersion> getInRelationTo() {
       return this.inRelationTo;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/quantitativeOverlap")
    private QuantitativeRelationAssessmentQuantitativeOverlap quantitativeOverlap;
    
    /**
    * Numerical characterization of how much two things occupy the same space.
    */
    public QuantitativeRelationAssessmentQuantitativeOverlap getQuantitativeOverlap() {
       return this.quantitativeOverlap;
    }

 

}