package org.openmetadatainitiative.openminds.latest.SANDS.atlas;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.SANDS.atlas.AtlasAnnotation;
import org.openmetadatainitiative.openminds.latest.SANDS.atlas.intf.ParcellationEntityVersionHasParent;
import org.openmetadatainitiative.openminds.latest.SANDS.atlas.intf.ParcellationEntityVersionRelationAssessment;


import static org.openmetadatainitiative.openminds.latest.SANDS.atlas.ParcellationEntityVersion.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class ParcellationEntityVersion extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity, org.openmetadatainitiative.openminds.latest.specimenPrep.activity.intf.CranialWindowPreparationStudyTarget, org.openmetadatainitiative.openminds.latest.specimenPrep.activity.intf.TissueCulturePreparationStudyTarget, org.openmetadatainitiative.openminds.latest.specimenPrep.activity.intf.TissueSampleSlicingStudyTarget, org.openmetadatainitiative.openminds.latest.ephys.activity.intf.RecordingActivityStudyTarget, org.openmetadatainitiative.openminds.latest.ephys.activity.intf.CellPatchingStudyTarget, org.openmetadatainitiative.openminds.latest.ephys.activity.intf.ElectrodePlacementStudyTarget, org.openmetadatainitiative.openminds.latest.ephys.device.intf.ElectrodeUsageAnatomicalLocation, org.openmetadatainitiative.openminds.latest.ephys.device.intf.PipetteUsageAnatomicalLocation, org.openmetadatainitiative.openminds.latest.ephys.device.intf.ElectrodeArrayUsageAnatomicalLocationOfArray, org.openmetadatainitiative.openminds.latest.ephys.device.intf.ElectrodeArrayUsageAnatomicalLocationOfElectrodes, org.openmetadatainitiative.openminds.latest.core.products.intf.DatasetVersionStudyTarget, org.openmetadatainitiative.openminds.latest.core.products.intf.ModelStudyTarget, org.openmetadatainitiative.openminds.latest.core.research.intf.ProtocolExecutionStudyTarget, org.openmetadatainitiative.openminds.latest.core.research.intf.TissueSampleCollectionAnatomicalLocation, org.openmetadatainitiative.openminds.latest.core.research.intf.TissueSampleAnatomicalLocation, org.openmetadatainitiative.openminds.latest.core.data.intf.ServiceLinkDataLocation, org.openmetadatainitiative.openminds.latest.core.data.intf.FileBundleGroupedBy, org.openmetadatainitiative.openminds.latest.computation.intf.GenericComputationStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.DataAnalysisStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.VisualizationStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.SimulationStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.ValidationTestStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.ModelValidationStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.OptimizationStudyTarget, org.openmetadatainitiative.openminds.latest.computation.intf.DataCopyStudyTarget, org.openmetadatainitiative.openminds.latest.SANDS.atlas.intf.ParcellationEntityVersionHasParent, org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.intf.QualitativeRelationAssessmentInRelationTo, org.openmetadatainitiative.openminds.latest.SANDS.miscellaneous.intf.AnatomicalTargetPositionAnatomicalTarget, org.openmetadatainitiative.openminds.latest.stimulation.activity.intf.StimulationActivityStudyTarget{
    public static final String SEMANTIC_NAME = "https://openminds.om-i.org/types/ParcellationEntityVersion";

    @JsonIgnore
    public Reference<ParcellationEntityVersion> getReference() {
        return doGetReference();
    }

    public static Reference<ParcellationEntityVersion> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private ParcellationEntityVersion() {
        this(null);
    }

    private ParcellationEntityVersion(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    

    
    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<ParcellationEntityVersion>{
        public Builder abbreviation(String abbreviation) { ParcellationEntityVersion.this.abbreviation = abbreviation; return this; }
        public Builder additionalRemarks(String additionalRemarks) { ParcellationEntityVersion.this.additionalRemarks = additionalRemarks; return this; }
        public Builder alternateName(List<String> alternateName) { ParcellationEntityVersion.this.alternateName = alternateName; return this; }
        public Builder correctedName(String correctedName) { ParcellationEntityVersion.this.correctedName = correctedName; return this; }
        public Builder hasAnnotation(List<Function<AtlasAnnotation.EmbeddedBuilder, AtlasAnnotation>> hasAnnotation) { ParcellationEntityVersion.this.hasAnnotation = hasAnnotation.stream().map(b -> b.apply(AtlasAnnotation.createEmbedded())).toList(); return this; }
        public Builder hasParent(List<Reference<? extends ParcellationEntityVersionHasParent>> hasParent) { ParcellationEntityVersion.this.hasParent = hasParent; return this; }
        public Builder lookupLabel(String lookupLabel) { ParcellationEntityVersion.this.lookupLabel = lookupLabel; return this; }
        public Builder name(String name) { ParcellationEntityVersion.this.name = name; return this; }
        public Builder ontologyIdentifier(List<String> ontologyIdentifier) { ParcellationEntityVersion.this.ontologyIdentifier = ontologyIdentifier; return this; }
        public Builder relationAssessment(List<Function<ParcellationEntityVersionRelationAssessment.EmbeddedBuilder, ParcellationEntityVersionRelationAssessment>> relationAssessment) { ParcellationEntityVersion.this.relationAssessment = relationAssessment.stream().map(b -> b.apply(ParcellationEntityVersionRelationAssessment.createEmbedded())).toList(); return this; }
        public Builder versionIdentifier(String versionIdentifier) { ParcellationEntityVersion.this.versionIdentifier = versionIdentifier; return this; }
        public Builder versionInnovation(String versionInnovation) { ParcellationEntityVersion.this.versionInnovation = versionInnovation; return this; }
        

        public ParcellationEntityVersion build(OpenMINDSContext context) {
            ParcellationEntityVersion.super.build(context);
            return ParcellationEntityVersion.this;
        }
    }

    public static ParcellationEntityVersion.Builder create(LocalId localId){
        return new ParcellationEntityVersion(localId).new Builder();
    }

    public ParcellationEntityVersion.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, ParcellationEntityVersion.class).new Builder();
    }
    

   @JsonProperty(value = "https://openminds.om-i.org/props/abbreviation")
    private String abbreviation;
    
    public String getAbbreviation() {
       return this.abbreviation;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/additionalRemarks")
    private String additionalRemarks;
    
    /**
    * Mention of what deserves additional attention or notice.
    */
    public String getAdditionalRemarks() {
       return this.additionalRemarks;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/alternateName")
    private List<String> alternateName;
    
    public List<String> getAlternateName() {
       return this.alternateName;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/correctedName")
    private String correctedName;
    
    public String getCorrectedName() {
       return this.correctedName;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/hasAnnotation")
    private List<AtlasAnnotation> hasAnnotation;
    
    public List<AtlasAnnotation> getHasAnnotation() {
       return this.hasAnnotation;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/hasParent")
    private List<Reference<? extends ParcellationEntityVersionHasParent>> hasParent;
    
    /**
    * Reference to a parent object or legal person.
    */
    public List<Reference<? extends ParcellationEntityVersionHasParent>> getHasParent() {
       return this.hasParent;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/name")
    private String name;
    
    /**
    * Word or phrase that constitutes the distinctive designation of a being or thing.
    */
    public String getName() {
       return this.name;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/ontologyIdentifier")
    private List<String> ontologyIdentifier;
    
    /**
    * Term or code used to identify something or someone registered within a particular ontology.
    */
    public List<String> getOntologyIdentifier() {
       return this.ontologyIdentifier;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/relationAssessment")
    private List<? extends ParcellationEntityVersionRelationAssessment> relationAssessment;
    
    public List<? extends ParcellationEntityVersionRelationAssessment> getRelationAssessment() {
       return this.relationAssessment;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/versionIdentifier")
    private String versionIdentifier;
    
    /**
    * Term or code used to identify the version of something.
    */
    public String getVersionIdentifier() {
       return this.versionIdentifier;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/versionInnovation")
    private String versionInnovation;
    
    /**
    * Documentation on what changed in comparison to a previously published form of something.
    */
    public String getVersionInnovation() {
       return this.versionInnovation;
    }

 

}