package org.openmetadatainitiative.openminds.latest.ephys.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.controlledTerms.UnitOfMeasurement;


import static org.openmetadatainitiative.openminds.latest.ephys.entity.Channel.*;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Channel extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/ephys/Channel";

    @JsonIgnore
    public Reference<Channel> getReference() {
        return doGetReference();
    }

    public static Reference<Channel> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private Channel(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Channel>{
        
        public Builder internalIdentifier(String internalIdentifier) { Channel.this.internalIdentifier = internalIdentifier; return this; }
        
        public Builder unit(Reference<UnitOfMeasurement> unit) { Channel.this.unit = unit; return this; }
        

        public Channel build() {
            if (Channel.this.id == null) {
                Channel.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(Channel.this.types == null || Channel.this.types.isEmpty() || !Channel.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = Channel.this.types;
                Channel.this.types = new ArrayList<>();
                Channel.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    Channel.this.types.addAll(oldValues);
                }
            }
            return Channel.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/internalIdentifier")
    private String internalIdentifier;
    
    /**
    * Term or code that identifies someone or something within a particular product.
    */
    public String getInternalIdentifier() {
       return this.internalIdentifier;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/unit")
    private Reference<UnitOfMeasurement> unit;
    
    /**
    * Determinate quantity adopted as a standard of measurement.
    */
    public Reference<UnitOfMeasurement> getUnit() {
       return this.unit;
    }

 
    public static Channel.Builder create(LocalId localId){
        return new Channel(localId).new Builder();
    }

    public Channel.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Channel.class).new Builder();
    }
}