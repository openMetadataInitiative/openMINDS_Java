package org.openmetadatainitiative.openminds.latest.ephys.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.miscellaneous.QuantitativeValue;
import org.openmetadatainitiative.openminds.latest.ephys.entity.Channel;
import org.openmetadatainitiative.openminds.latest.ephys.entity.intf.RecordingDataLocation;
import org.openmetadatainitiative.openminds.latest.ephys.entity.intf.RecordingRecordedWith;


import static org.openmetadatainitiative.openminds.latest.ephys.entity.Recording.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Recording extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/ephys/Recording";

    @JsonIgnore
    public Reference<Recording> getReference() {
        return doGetReference();
    }

    public static Reference<Recording> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private Recording(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Recording>{
        
        public Builder additionalRemarks(String additionalRemarks) { Recording.this.additionalRemarks = additionalRemarks; return this; }
        
        public Builder channel(List<Channel> channel) { Recording.this.channel = channel; return this; }
        
        public Builder dataLocation(Reference<? extends RecordingDataLocation> dataLocation) { Recording.this.dataLocation = dataLocation; return this; }
        
        public Builder internalIdentifier(String internalIdentifier) { Recording.this.internalIdentifier = internalIdentifier; return this; }
        
        public Builder name(String name) { Recording.this.name = name; return this; }
        
        public Builder previousRecording(Reference<Recording> previousRecording) { Recording.this.previousRecording = previousRecording; return this; }
        
        public Builder recordedWith(Reference<? extends RecordingRecordedWith> recordedWith) { Recording.this.recordedWith = recordedWith; return this; }
        
        public Builder samplingFrequency(QuantitativeValue samplingFrequency) { Recording.this.samplingFrequency = samplingFrequency; return this; }
        

        public Recording build(OpenMINDSContext context) {
            if (Recording.this.id == null) {
                Recording.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            Recording.this.atType = SEMANTIC_NAME;
            return Recording.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/additionalRemarks")
    private String additionalRemarks;
    
    /**
    * Mention of what deserves additional attention or notice.
    */
    public String getAdditionalRemarks() {
       return this.additionalRemarks;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/channel")
    private List<Channel> channel;
    
    public List<Channel> getChannel() {
       return this.channel;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/dataLocation")
    private Reference<? extends RecordingDataLocation> dataLocation;
    
    public Reference<? extends RecordingDataLocation> getDataLocation() {
       return this.dataLocation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/internalIdentifier")
    private String internalIdentifier;
    
    /**
    * Term or code that identifies someone or something within a particular product.
    */
    public String getInternalIdentifier() {
       return this.internalIdentifier;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/name")
    private String name;
    
    /**
    * Word or phrase that constitutes the distinctive designation of a being or thing.
    */
    public String getName() {
       return this.name;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/previousRecording")
    private Reference<Recording> previousRecording;
    
    public Reference<Recording> getPreviousRecording() {
       return this.previousRecording;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/recordedWith")
    private Reference<? extends RecordingRecordedWith> recordedWith;
    
    public Reference<? extends RecordingRecordedWith> getRecordedWith() {
       return this.recordedWith;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/samplingFrequency")
    private QuantitativeValue samplingFrequency;
    
    public QuantitativeValue getSamplingFrequency() {
       return this.samplingFrequency;
    }

 
    public static Recording.Builder create(LocalId localId){
        return new Recording(localId).new Builder();
    }

    public Recording.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Recording.class).new Builder();
    }
}