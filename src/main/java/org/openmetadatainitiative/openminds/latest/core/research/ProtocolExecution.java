package org.openmetadatainitiative.openminds.latest.core.research;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.controlledTerms.PreparationType;
import org.openmetadatainitiative.openminds.latest.core.products.DatasetVersion;
import org.openmetadatainitiative.openminds.latest.core.research.BehavioralProtocol;
import org.openmetadatainitiative.openminds.latest.core.research.CustomPropertySet;
import org.openmetadatainitiative.openminds.latest.core.research.Protocol;
import org.openmetadatainitiative.openminds.latest.core.research.intf.ProtocolExecutionInput;
import org.openmetadatainitiative.openminds.latest.core.research.intf.ProtocolExecutionOutput;
import org.openmetadatainitiative.openminds.latest.core.research.intf.ProtocolExecutionPerformedBy;
import org.openmetadatainitiative.openminds.latest.core.research.intf.ProtocolExecutionStudyTarget;


import static org.openmetadatainitiative.openminds.latest.core.research.ProtocolExecution.SEMANTIC_NAME;
/**
 * Structured information on a protocol execution.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class ProtocolExecution extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/ProtocolExecution";

    @JsonIgnore
    public Reference<ProtocolExecution> getReference() {
        return doGetReference();
    }

    public static Reference<ProtocolExecution> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private ProtocolExecution(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<ProtocolExecution>{
        
        public Builder behavioralProtocol(List<Reference<BehavioralProtocol>> behavioralProtocol) { ProtocolExecution.this.behavioralProtocol = behavioralProtocol; return this; }
        
        public Builder customPropertySet(List<CustomPropertySet> customPropertySet) { ProtocolExecution.this.customPropertySet = customPropertySet; return this; }
        
        public Builder description(String description) { ProtocolExecution.this.description = description; return this; }
        
        public Builder endTime(String endTime) { ProtocolExecution.this.endTime = endTime; return this; }
        
        public Builder input(List<Reference<? extends ProtocolExecutionInput>> input) { ProtocolExecution.this.input = input; return this; }
        
        public Builder isPartOf(Reference<DatasetVersion> isPartOf) { ProtocolExecution.this.isPartOf = isPartOf; return this; }
        
        public Builder lookupLabel(String lookupLabel) { ProtocolExecution.this.lookupLabel = lookupLabel; return this; }
        
        public Builder output(List<Reference<? extends ProtocolExecutionOutput>> output) { ProtocolExecution.this.output = output; return this; }
        
        public Builder performedBy(List<Reference<? extends ProtocolExecutionPerformedBy>> performedBy) { ProtocolExecution.this.performedBy = performedBy; return this; }
        
        public Builder preparationDesign(Reference<PreparationType> preparationDesign) { ProtocolExecution.this.preparationDesign = preparationDesign; return this; }
        
        public Builder protocol(List<Reference<Protocol>> protocol) { ProtocolExecution.this.protocol = protocol; return this; }
        
        public Builder startTime(String startTime) { ProtocolExecution.this.startTime = startTime; return this; }
        
        public Builder studyTarget(List<Reference<? extends ProtocolExecutionStudyTarget>> studyTarget) { ProtocolExecution.this.studyTarget = studyTarget; return this; }
        

        public ProtocolExecution build(OpenMINDSContext context) {
            if (ProtocolExecution.this.id == null) {
                ProtocolExecution.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            ProtocolExecution.this.atType = SEMANTIC_NAME;
            return ProtocolExecution.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/behavioralProtocol")
    private List<Reference<BehavioralProtocol>> behavioralProtocol;
    
    public List<Reference<BehavioralProtocol>> getBehavioralProtocol() {
       return this.behavioralProtocol;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/customPropertySet")
    private List<CustomPropertySet> customPropertySet;
    
    public List<CustomPropertySet> getCustomPropertySet() {
       return this.customPropertySet;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/description")
    private String description;
    
    /**
    * Longer statement or account giving the characteristics of someone or something.
    */
    public String getDescription() {
       return this.description;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/endTime")
    private String endTime;
    
    public String getEndTime() {
       return this.endTime;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/input")
    private List<Reference<? extends ProtocolExecutionInput>> input;
    
    /**
    * Something or someone that is put into or participates in a process or machine.
    */
    public List<Reference<? extends ProtocolExecutionInput>> getInput() {
       return this.input;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/isPartOf")
    private Reference<DatasetVersion> isPartOf;
    
    /**
    * Reference to the ensemble of multiple things or beings.
    */
    public Reference<DatasetVersion> getIsPartOf() {
       return this.isPartOf;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/output")
    private List<Reference<? extends ProtocolExecutionOutput>> output;
    
    /**
    * Something or someone that comes out of, is delivered or produced by a process or machine.
    */
    public List<Reference<? extends ProtocolExecutionOutput>> getOutput() {
       return this.output;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/performedBy")
    private List<Reference<? extends ProtocolExecutionPerformedBy>> performedBy;
    
    public List<Reference<? extends ProtocolExecutionPerformedBy>> getPerformedBy() {
       return this.performedBy;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/preparationDesign")
    private Reference<PreparationType> preparationDesign;
    
    public Reference<PreparationType> getPreparationDesign() {
       return this.preparationDesign;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/protocol")
    private List<Reference<Protocol>> protocol;
    
    /**
    * Plan that describes the process of a scientific or medical experiment, treatment, or procedure.
    */
    public List<Reference<Protocol>> getProtocol() {
       return this.protocol;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/startTime")
    private String startTime;
    
    public String getStartTime() {
       return this.startTime;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/studyTarget")
    private List<Reference<? extends ProtocolExecutionStudyTarget>> studyTarget;
    
    /**
    * Structure or function that was targeted within a study.
    */
    public List<Reference<? extends ProtocolExecutionStudyTarget>> getStudyTarget() {
       return this.studyTarget;
    }

 
    public static ProtocolExecution.Builder create(LocalId localId){
        return new ProtocolExecution(localId).new Builder();
    }

    public ProtocolExecution.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, ProtocolExecution.class).new Builder();
    }
}