package org.openmetadatainitiative.openminds.latest.core.research;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.data.ContentType;


import static org.openmetadatainitiative.openminds.latest.core.research.Configuration.*;
/**
 * Structured information about the properties or parameters of an entity or process.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Configuration extends Instance implements org.openmetadatainitiative.openminds.latest.computation.intf.WorkflowExecutionConfiguration, org.openmetadatainitiative.openminds.latest.computation.intf.ValidationTestVersionConfiguration, org.openmetadatainitiative.openminds.latest.core.research.intf.CustomPropertySetDataLocation{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/Configuration";

    @JsonIgnore
    public Reference<Configuration> getReference() {
        return doGetReference();
    }

    public static Reference<Configuration> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private Configuration(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Configuration>{
        
        public Builder configuration(String configuration) { Configuration.this.configuration = configuration; return this; }
        
        public Builder format(Reference<ContentType> format) { Configuration.this.format = format; return this; }
        
        public Builder lookupLabel(String lookupLabel) { Configuration.this.lookupLabel = lookupLabel; return this; }
        

        public Configuration build() {
            if (Configuration.this.id == null) {
                Configuration.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(Configuration.this.types == null || Configuration.this.types.isEmpty() || !Configuration.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = Configuration.this.types;
                Configuration.this.types = new ArrayList<>();
                Configuration.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    Configuration.this.types.addAll(oldValues);
                }
            }
            return Configuration.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/configuration")
    private String configuration;
    
    public String getConfiguration() {
       return this.configuration;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/format")
    private Reference<ContentType> format;
    
    /**
    * Method of digitally organizing and structuring data or information.
    */
    public Reference<ContentType> getFormat() {
       return this.format;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

 
    public static Configuration.Builder create(LocalId localId){
        return new Configuration(localId).new Builder();
    }

    public Configuration.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Configuration.class).new Builder();
    }
}