package org.openmetadatainitiative.openminds.latest.core.data;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.controlledTerms.FileBundleGrouping;


import static org.openmetadatainitiative.openminds.latest.core.data.FilePathPattern.*;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class FilePathPattern extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/FilePathPattern";

    @JsonIgnore
    public Reference<FilePathPattern> getReference() {
        return doGetReference();
    }

    public static Reference<FilePathPattern> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private FilePathPattern(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<FilePathPattern>{
        
        public Builder groupingType(List<Reference<FileBundleGrouping>> groupingType) { FilePathPattern.this.groupingType = groupingType; return this; }
        
        public Builder regex(String regex) { FilePathPattern.this.regex = regex; return this; }
        

        public FilePathPattern build() {
            if (FilePathPattern.this.id == null) {
                FilePathPattern.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(FilePathPattern.this.types == null || FilePathPattern.this.types.isEmpty() || !FilePathPattern.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = FilePathPattern.this.types;
                FilePathPattern.this.types = new ArrayList<>();
                FilePathPattern.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    FilePathPattern.this.types.addAll(oldValues);
                }
            }
            return FilePathPattern.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/groupingType")
    private List<Reference<FileBundleGrouping>> groupingType;
    
    public List<Reference<FileBundleGrouping>> getGroupingType() {
       return this.groupingType;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/regex")
    private String regex;
    
    public String getRegex() {
       return this.regex;
    }

 
    public static FilePathPattern.Builder create(LocalId localId){
        return new FilePathPattern(localId).new Builder();
    }

    public FilePathPattern.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, FilePathPattern.class).new Builder();
    }
}