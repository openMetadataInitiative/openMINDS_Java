package org.openmetadatainitiative.openminds.latest.core.research;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.research.intf.CustomPropertySetDataLocation;
import org.openmetadatainitiative.openminds.latest.core.research.intf.CustomPropertySetRelevantFor;


import static org.openmetadatainitiative.openminds.latest.core.research.CustomPropertySet.SEMANTIC_NAME;
/**
 * Structured information about properties of an entity that are not represented in an openMINDS schema.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class CustomPropertySet extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/CustomPropertySet";

    @JsonIgnore
    public Reference<CustomPropertySet> getReference() {
        return doGetReference();
    }

    public static Reference<CustomPropertySet> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private CustomPropertySet(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<CustomPropertySet>{
        
        public Builder context(String context) { CustomPropertySet.this.context = context; return this; }
        
        public Builder dataLocation(Reference<? extends CustomPropertySetDataLocation> dataLocation) { CustomPropertySet.this.dataLocation = dataLocation; return this; }
        
        public Builder relevantFor(Reference<? extends CustomPropertySetRelevantFor> relevantFor) { CustomPropertySet.this.relevantFor = relevantFor; return this; }
        

        public CustomPropertySet build(OpenMINDSContext context) {
            if (CustomPropertySet.this.id == null) {
                CustomPropertySet.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            CustomPropertySet.this.atType = SEMANTIC_NAME;
            return CustomPropertySet.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/context")
    private String context;
    
    public String getContext() {
       return this.context;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/dataLocation")
    private Reference<? extends CustomPropertySetDataLocation> dataLocation;
    
    public Reference<? extends CustomPropertySetDataLocation> getDataLocation() {
       return this.dataLocation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/relevantFor")
    private Reference<? extends CustomPropertySetRelevantFor> relevantFor;
    
    /**
    * Reference to what or whom something or someone bears siginificance.
    */
    public Reference<? extends CustomPropertySetRelevantFor> getRelevantFor() {
       return this.relevantFor;
    }

 
    public static CustomPropertySet.Builder create(LocalId localId){
        return new CustomPropertySet(localId).new Builder();
    }

    public CustomPropertySet.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, CustomPropertySet.class).new Builder();
    }
}