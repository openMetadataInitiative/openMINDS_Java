package org.openmetadatainitiative.openminds.latest.core.research;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.research.intf.CustomPropertySetDataLocation;
import org.openmetadatainitiative.openminds.latest.core.research.intf.CustomPropertySetRelevantFor;


import static org.openmetadatainitiative.openminds.latest.core.research.CustomPropertySet.SEMANTIC_NAME;
/**
 * Structured information about properties of an entity that are not represented in an openMINDS schema.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class CustomPropertySet extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity{
    public static final String SEMANTIC_NAME = "https://openminds.om-i.org/types/CustomPropertySet";

    @JsonIgnore
    public Reference<CustomPropertySet> getReference() {
        return doGetReference();
    }

    public static Reference<CustomPropertySet> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private CustomPropertySet() {
        this(null);
    }

    private CustomPropertySet(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    
    public class EmbeddedBuilder {

        public EmbeddedBuilder context(String context) { CustomPropertySet.this.context = context; return this; }
        public EmbeddedBuilder dataLocation(Reference<? extends CustomPropertySetDataLocation> dataLocation) { CustomPropertySet.this.dataLocation = dataLocation; return this; }
        public EmbeddedBuilder relevantFor(Reference<? extends CustomPropertySetRelevantFor> relevantFor) { CustomPropertySet.this.relevantFor = relevantFor; return this; }
        

        public CustomPropertySet build(){
            return CustomPropertySet.this;
        }
    }

    public static CustomPropertySet.EmbeddedBuilder createEmbedded(){
        return new CustomPropertySet(null).new EmbeddedBuilder();
    }
    

    

   @JsonProperty(value = "https://openminds.om-i.org/props/context")
    private String context;
    
    public String getContext() {
       return this.context;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/dataLocation")
    private Reference<? extends CustomPropertySetDataLocation> dataLocation;
    
    public Reference<? extends CustomPropertySetDataLocation> getDataLocation() {
       return this.dataLocation;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/relevantFor")
    private Reference<? extends CustomPropertySetRelevantFor> relevantFor;
    
    /**
    * Reference to what or whom something or someone bears significance.
    */
    public Reference<? extends CustomPropertySetRelevantFor> getRelevantFor() {
       return this.relevantFor;
    }

 

}