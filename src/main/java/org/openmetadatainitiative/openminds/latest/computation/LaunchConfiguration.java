package org.openmetadatainitiative.openminds.latest.computation;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.latest.core.research.PropertyValueList;


import static org.openmetadatainitiative.openminds.latest.computation.LaunchConfiguration.SEMANTIC_NAME;
/**
 * Structured information about the launch of a computational process.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class LaunchConfiguration extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.Latest.Entity{
    public static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/computation/LaunchConfiguration";

    @JsonIgnore
    public Reference<LaunchConfiguration> getReference() {
        return doGetReference();
    }

    public static Reference<LaunchConfiguration> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private LaunchConfiguration() {
        this(null);
    }

    private LaunchConfiguration(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    

    
    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<LaunchConfiguration>{
        public Builder argument(List<String> argument) { LaunchConfiguration.this.argument = argument; return this; }
        public Builder description(String description) { LaunchConfiguration.this.description = description; return this; }
        public Builder environmentVariable(Reference<PropertyValueList> environmentVariable) { LaunchConfiguration.this.environmentVariable = environmentVariable; return this; }
        public Builder executable(String executable) { LaunchConfiguration.this.executable = executable; return this; }
        public Builder name(String name) { LaunchConfiguration.this.name = name; return this; }
        

        public LaunchConfiguration build(OpenMINDSContext context) {
            LaunchConfiguration.super.build(context);
            return LaunchConfiguration.this;
        }
    }

    public static LaunchConfiguration.Builder create(LocalId localId){
        return new LaunchConfiguration(localId).new Builder();
    }

    public LaunchConfiguration.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, LaunchConfiguration.class).new Builder();
    }
    

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/argument")
    private List<String> argument;
    
    public List<String> getArgument() {
       return this.argument;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/description")
    private String description;
    
    /**
    * Longer statement or account giving the characteristics of someone or something.
    */
    public String getDescription() {
       return this.description;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/environmentVariable")
    private Reference<PropertyValueList> environmentVariable;
    
    public Reference<PropertyValueList> getEnvironmentVariable() {
       return this.environmentVariable;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/executable")
    private String executable;
    
    public String getExecutable() {
       return this.executable;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/name")
    private String name;
    
    /**
    * Word or phrase that constitutes the distinctive designation of a being or thing.
    */
    public String getName() {
       return this.name;
    }

 

}