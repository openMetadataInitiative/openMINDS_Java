package org.openmetadatainitiative.openminds.v3.core.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.controlledTerms.TypeOfUncertainty;
import org.openmetadatainitiative.openminds.v3.controlledTerms.UnitOfMeasurement;


import static org.openmetadatainitiative.openminds.v3.core.miscellaneous.QuantitativeValueArray.*;
/**
 * A representation of an array of quantitative values, optionally with uncertainties.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class QuantitativeValueArray extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/QuantitativeValueArray";

    @JsonIgnore
    public Reference<QuantitativeValueArray> getReference() {
        return doGetReference();
    }

    public static Reference<QuantitativeValueArray> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private QuantitativeValueArray(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<QuantitativeValueArray>{
        
        public Builder negativeUncertainties(Object negativeUncertainties) { QuantitativeValueArray.this.negativeUncertainties = negativeUncertainties; return this; }
        
        public Builder positiveUncertainties(Object positiveUncertainties) { QuantitativeValueArray.this.positiveUncertainties = positiveUncertainties; return this; }
        
        public Builder typeOfUncertainty(Reference<TypeOfUncertainty> typeOfUncertainty) { QuantitativeValueArray.this.typeOfUncertainty = typeOfUncertainty; return this; }
        
        public Builder unit(Reference<UnitOfMeasurement> unit) { QuantitativeValueArray.this.unit = unit; return this; }
        
        public Builder values(Object values) { QuantitativeValueArray.this.values = values; return this; }
        

        public QuantitativeValueArray build() {
            if (QuantitativeValueArray.this.id == null) {
                QuantitativeValueArray.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(QuantitativeValueArray.this.types == null || QuantitativeValueArray.this.types.isEmpty() || !QuantitativeValueArray.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = QuantitativeValueArray.this.types;
                QuantitativeValueArray.this.types = new ArrayList<>();
                QuantitativeValueArray.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    QuantitativeValueArray.this.types.addAll(oldValues);
                }
            }
            return QuantitativeValueArray.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/negativeUncertainties")
    private Object negativeUncertainties;
    
    public Object getNegativeUncertainties() {
       return this.negativeUncertainties;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/positiveUncertainties")
    private Object positiveUncertainties;
    
    public Object getPositiveUncertainties() {
       return this.positiveUncertainties;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/typeOfUncertainty")
    private Reference<TypeOfUncertainty> typeOfUncertainty;
    
    /**
    * Distinct technique used to quantify the uncertainty of a measurement.
    */
    public Reference<TypeOfUncertainty> getTypeOfUncertainty() {
       return this.typeOfUncertainty;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/unit")
    private Reference<UnitOfMeasurement> unit;
    
    /**
    * Determinate quantity adopted as a standard of measurement.
    */
    public Reference<UnitOfMeasurement> getUnit() {
       return this.unit;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/values")
    private Object values;
    
    public Object getValues() {
       return this.values;
    }

 
    public static QuantitativeValueArray.Builder create(LocalId localId){
        return new QuantitativeValueArray(localId).new Builder();
    }

    public QuantitativeValueArray.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, QuantitativeValueArray.class).new Builder();
    }
}