package org.openmetadatainitiative.openminds.v3.core.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.controlledTerms.TypeOfUncertainty;
import org.openmetadatainitiative.openminds.v3.controlledTerms.UnitOfMeasurement;


import static org.openmetadatainitiative.openminds.v3.core.miscellaneous.QuantitativeValue.SEMANTIC_NAME;
/**
 * Structured information on a quantitative value.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class QuantitativeValue extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.V3.Entity, org.openmetadatainitiative.openminds.v3.computation.intf.OptimizationResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.ModelValidationResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.DataCopyResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.SimulationResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.VisualizationResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.DataAnalysisResourceUsage, org.openmetadatainitiative.openminds.v3.computation.intf.GenericComputationResourceUsage, org.openmetadatainitiative.openminds.v3.publications.intf.LearningResourceRequiredTime, org.openmetadatainitiative.openminds.v3.chemicals.intf.ChemicalSubstancePurity, org.openmetadatainitiative.openminds.v3.chemicals.intf.ProductSourcePurity, org.openmetadatainitiative.openminds.v3.ephys.activity.intf.CellPatchingBathTemperature, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeArrayUsageContactResistances, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeUsageContactResistance, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeIntrinsicResistance, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeArrayIntrinsicResistance, org.openmetadatainitiative.openminds.v3.ephys.device.intf.PipetteUsagePipetteResistance, org.openmetadatainitiative.openminds.v3.SANDS.miscellaneous.intf.QuantitativeRelationAssessmentQuantitativeOverlap, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectStateAge, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectStateRelativeTimeIndication, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectStateWeight, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectGroupStateAge, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectGroupStateRelativeTimeIndication, org.openmetadatainitiative.openminds.v3.core.research.intf.SubjectGroupStateWeight, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleCollectionStateAge, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleCollectionStateRelativeTimeIndication, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleCollectionStateWeight, org.openmetadatainitiative.openminds.v3.core.research.intf.NumericalPropertyValue, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleStateAge, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleStateRelativeTimeIndication, org.openmetadatainitiative.openminds.v3.core.research.intf.TissueSampleStateWeight, org.openmetadatainitiative.openminds.v3.core.data.intf.MeasurementValue, org.openmetadatainitiative.openminds.v3.specimenPrep.activity.intf.TissueSampleSlicingTemperature, org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageSliceThickness, org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageSlicingAngle{
    public static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/QuantitativeValue";

    @JsonIgnore
    public Reference<QuantitativeValue> getReference() {
        return doGetReference();
    }

    public static Reference<QuantitativeValue> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private QuantitativeValue() {
        this(null);
    }

    private QuantitativeValue(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    
    public class EmbeddedBuilder {

        public EmbeddedBuilder typeOfUncertainty(Reference<TypeOfUncertainty> typeOfUncertainty) { QuantitativeValue.this.typeOfUncertainty = typeOfUncertainty; return this; }
        public EmbeddedBuilder uncertainty(List<Double> uncertainty) { QuantitativeValue.this.uncertainty = uncertainty; return this; }
        public EmbeddedBuilder unit(Reference<UnitOfMeasurement> unit) { QuantitativeValue.this.unit = unit; return this; }
        public EmbeddedBuilder value(Double value) { QuantitativeValue.this.value = value; return this; }
        

        public QuantitativeValue build(){
            return QuantitativeValue.this;
        }
    }

    public static QuantitativeValue.EmbeddedBuilder createEmbedded(){
        return new QuantitativeValue(null).new EmbeddedBuilder();
    }
    

    

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/typeOfUncertainty")
    private Reference<TypeOfUncertainty> typeOfUncertainty;
    
    /**
    * Distinct technique used to quantify the uncertainty of a measurement.
    */
    public Reference<TypeOfUncertainty> getTypeOfUncertainty() {
       return this.typeOfUncertainty;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/uncertainty")
    private List<Double> uncertainty;
    
    /**
    * Quantitative value range defining the uncertainty of a measurement.
    */
    public List<Double> getUncertainty() {
       return this.uncertainty;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/unit")
    private Reference<UnitOfMeasurement> unit;
    
    /**
    * Determinate quantity adopted as a standard of measurement.
    */
    public Reference<UnitOfMeasurement> getUnit() {
       return this.unit;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/value")
    private Double value;
    
    /**
    * Entry for a property.
    */
    public Double getValue() {
       return this.value;
    }

 

}