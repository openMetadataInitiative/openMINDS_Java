package org.openmetadatainitiative.openminds.v3.core.products;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.controlledTerms.SetupType;
import org.openmetadatainitiative.openminds.v3.core.products.intf.SetupHasPart;
import org.openmetadatainitiative.openminds.v3.core.products.intf.SetupManufacturer;


import static org.openmetadatainitiative.openminds.v3.core.products.Setup.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Setup extends Instance implements org.openmetadatainitiative.openminds.v3.core.products.intf.SetupHasPart{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/Setup";

    @JsonIgnore
    public Reference<Setup> getReference() {
        return doGetReference();
    }

    public static Reference<Setup> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private Setup(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Setup>{
        
        public Builder description(String description) { Setup.this.description = description; return this; }
        
        public Builder hasPart(List<Reference<? extends SetupHasPart>> hasPart) { Setup.this.hasPart = hasPart; return this; }
        
        public Builder location(String location) { Setup.this.location = location; return this; }
        
        public Builder manufacturer(List<Reference<? extends SetupManufacturer>> manufacturer) { Setup.this.manufacturer = manufacturer; return this; }
        
        public Builder name(String name) { Setup.this.name = name; return this; }
        
        public Builder type(List<Reference<SetupType>> type) { Setup.this.type = type; return this; }
        

        public Setup build(OpenMINDSContext context) {
            if (Setup.this.id == null) {
                Setup.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), openMINDSContext.idPrefix());
            }
            Setup.this.type = SEMANTIC_NAME;
            return Setup.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/description")
    private String description;
    
    /**
    * Longer statement or account giving the characteristics of someone or something.
    */
    public String getDescription() {
       return this.description;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/hasPart")
    private List<Reference<? extends SetupHasPart>> hasPart;
    
    public List<Reference<? extends SetupHasPart>> getHasPart() {
       return this.hasPart;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/location")
    private String location;
    
    public String getLocation() {
       return this.location;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/manufacturer")
    private List<Reference<? extends SetupManufacturer>> manufacturer;
    
    public List<Reference<? extends SetupManufacturer>> getManufacturer() {
       return this.manufacturer;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/name")
    private String name;
    
    /**
    * Word or phrase that constitutes the distinctive designation of a being or thing.
    */
    public String getName() {
       return this.name;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/type")
    private List<Reference<SetupType>> type;
    
    /**
    * Distinct class to which a group of entities or concepts with similar characteristics or attributes belong to.
    */
    public List<Reference<SetupType>> getType() {
       return this.type;
    }

 
    public static Setup.Builder create(LocalId localId){
        return new Setup(localId).new Builder();
    }

    public Setup.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Setup.class).new Builder();
    }
}