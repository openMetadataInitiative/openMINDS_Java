package org.openmetadatainitiative.openminds.v3.core.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.core.actors.Person;
import org.openmetadatainitiative.openminds.v3.core.miscellaneous.intf.CommentAbout;


import static org.openmetadatainitiative.openminds.v3.core.miscellaneous.Comment.SEMANTIC_NAME;
/**
 * Structured information about a short text expressing an opinion on, or giving information about some entity.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Comment extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/Comment";

    @JsonIgnore
    public Reference<Comment> getReference() {
        return doGetReference();
    }

    public static Reference<Comment> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private Comment(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Comment>{
        
        public Builder about(Reference<? extends CommentAbout> about) { Comment.this.about = about; return this; }
        
        public Builder comment(String comment) { Comment.this.comment = comment; return this; }
        
        public Builder commenter(Reference<Person> commenter) { Comment.this.commenter = commenter; return this; }
        
        public Builder timestamp(String timestamp) { Comment.this.timestamp = timestamp; return this; }
        

        public Comment build(OpenMINDSContext context) {
            if (Comment.this.id == null) {
                Comment.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            Comment.this.type = SEMANTIC_NAME;
            return Comment.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/about")
    private Reference<? extends CommentAbout> about;
    
    public Reference<? extends CommentAbout> getAbout() {
       return this.about;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/comment")
    private String comment;
    
    public String getComment() {
       return this.comment;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/commenter")
    private Reference<Person> commenter;
    
    public Reference<Person> getCommenter() {
       return this.commenter;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/timestamp")
    private String timestamp;
    
    public String getTimestamp() {
       return this.timestamp;
    }

 
    public static Comment.Builder create(LocalId localId){
        return new Comment(localId).new Builder();
    }

    public Comment.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Comment.class).new Builder();
    }
}