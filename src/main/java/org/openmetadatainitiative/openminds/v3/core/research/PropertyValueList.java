package org.openmetadatainitiative.openminds.v3.core.research;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.core.research.intf.PropertyValueListPropertyValuePair;


import static org.openmetadatainitiative.openminds.v3.core.research.PropertyValueList.SEMANTIC_NAME;
/**
 * An identifiable list of property-value pairs.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PropertyValueList extends Instance implements org.openmetadatainitiative.openminds.v3.computation.intf.ValidationTestVersionConfiguration, org.openmetadatainitiative.openminds.v3.SANDS.nonatlas.intf.CustomAnnotationSpecification, org.openmetadatainitiative.openminds.v3.core.research.intf.CustomPropertySetDataLocation{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/PropertyValueList";

    @JsonIgnore
    public Reference<PropertyValueList> getReference() {
        return doGetReference();
    }

    public static Reference<PropertyValueList> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private PropertyValueList(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<PropertyValueList>{
        
        public Builder lookupLabel(String lookupLabel) { PropertyValueList.this.lookupLabel = lookupLabel; return this; }
        
        public Builder propertyValuePair(List<? extends PropertyValueListPropertyValuePair> propertyValuePair) { PropertyValueList.this.propertyValuePair = propertyValuePair; return this; }
        

        public PropertyValueList build() {
            if (PropertyValueList.this.id == null) {
                PropertyValueList.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(PropertyValueList.this.types == null || PropertyValueList.this.types.isEmpty() || !PropertyValueList.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = PropertyValueList.this.types;
                PropertyValueList.this.types = new ArrayList<>();
                PropertyValueList.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    PropertyValueList.this.types.addAll(oldValues);
                }
            }
            return PropertyValueList.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/propertyValuePair")
    private List<? extends PropertyValueListPropertyValuePair> propertyValuePair;
    
    public List<? extends PropertyValueListPropertyValuePair> getPropertyValuePair() {
       return this.propertyValuePair;
    }

 
    public static PropertyValueList.Builder create(LocalId localId){
        return new PropertyValueList(localId).new Builder();
    }

    public PropertyValueList.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, PropertyValueList.class).new Builder();
    }
}