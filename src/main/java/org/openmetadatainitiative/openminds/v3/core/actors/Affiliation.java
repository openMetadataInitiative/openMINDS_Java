package org.openmetadatainitiative.openminds.v3.core.actors;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.core.actors.intf.AffiliationMemberOf;


import static org.openmetadatainitiative.openminds.v3.core.actors.Affiliation.*;
/**
 * Structured information about a relationship between two entities, such as a person and their employer.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Affiliation extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/Affiliation";

    @JsonIgnore
    public Reference<Affiliation> getReference() {
        return doGetReference();
    }

    public static Reference<Affiliation> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private Affiliation(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Affiliation>{
        
        public Builder endDate(String endDate) { Affiliation.this.endDate = endDate; return this; }
        
        public Builder memberOf(Reference<? extends AffiliationMemberOf> memberOf) { Affiliation.this.memberOf = memberOf; return this; }
        
        public Builder startDate(String startDate) { Affiliation.this.startDate = startDate; return this; }
        

        public Affiliation build() {
            if (Affiliation.this.id == null) {
                Affiliation.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(Affiliation.this.types == null || Affiliation.this.types.isEmpty() || !Affiliation.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = Affiliation.this.types;
                Affiliation.this.types = new ArrayList<>();
                Affiliation.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    Affiliation.this.types.addAll(oldValues);
                }
            }
            return Affiliation.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/endDate")
    private String endDate;
    
    /**
    * Date in the Gregorian calendar at which something terminates in time.
    */
    public String getEndDate() {
       return this.endDate;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/memberOf")
    private Reference<? extends AffiliationMemberOf> memberOf;
    
    public Reference<? extends AffiliationMemberOf> getMemberOf() {
       return this.memberOf;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/startDate")
    private String startDate;
    
    /**
    * Date in the Gregorian calendar at which something begins in time
    */
    public String getStartDate() {
       return this.startDate;
    }

 
    public static Affiliation.Builder create(LocalId localId){
        return new Affiliation(localId).new Builder();
    }

    public Affiliation.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Affiliation.class).new Builder();
    }
}