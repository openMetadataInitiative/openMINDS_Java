package org.openmetadatainitiative.openminds.v3.core.actors;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.core.actors.AccountInformation;
import org.openmetadatainitiative.openminds.v3.core.actors.Affiliation;
import org.openmetadatainitiative.openminds.v3.core.actors.ContactInformation;
import org.openmetadatainitiative.openminds.v3.core.digitalIdentifier.ORCID;


import static org.openmetadatainitiative.openminds.v3.core.actors.Person.*;
/**
 * Structured information on a person.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Person extends Instance implements org.openmetadatainitiative.openminds.v3.computation.intf.WorkflowRecipeVersionCustodian, org.openmetadatainitiative.openminds.v3.computation.intf.WorkflowRecipeVersionDeveloper, org.openmetadatainitiative.openminds.v3.computation.intf.ValidationTestCustodian, org.openmetadatainitiative.openminds.v3.computation.intf.ValidationTestDeveloper, org.openmetadatainitiative.openminds.v3.computation.intf.WorkflowRecipeCustodian, org.openmetadatainitiative.openminds.v3.computation.intf.WorkflowRecipeDeveloper, org.openmetadatainitiative.openminds.v3.computation.intf.OptimizationPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.OptimizationStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.ModelValidationPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.ModelValidationStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.DataCopyPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.DataCopyStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.SimulationPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.SimulationStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.VisualizationPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.VisualizationStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.WorkflowExecutionStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.ValidationTestVersionCustodian, org.openmetadatainitiative.openminds.v3.computation.intf.ValidationTestVersionDeveloper, org.openmetadatainitiative.openminds.v3.computation.intf.DataAnalysisPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.DataAnalysisStartedBy, org.openmetadatainitiative.openminds.v3.computation.intf.GenericComputationPerformedBy, org.openmetadatainitiative.openminds.v3.computation.intf.GenericComputationStartedBy, org.openmetadatainitiative.openminds.v3.publications.intf.LivePaperAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.LivePaperCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.LearningResourceAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.LearningResourceCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.LearningResourcePublisher, org.openmetadatainitiative.openminds.v3.publications.intf.ChapterAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.ChapterCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.ChapterPublisher, org.openmetadatainitiative.openminds.v3.publications.intf.ScholarlyArticleAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.ScholarlyArticleCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.ScholarlyArticlePublisher, org.openmetadatainitiative.openminds.v3.publications.intf.LivePaperVersionAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.LivePaperVersionCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.BookAuthor, org.openmetadatainitiative.openminds.v3.publications.intf.BookCustodian, org.openmetadatainitiative.openminds.v3.publications.intf.BookPublisher, org.openmetadatainitiative.openminds.v3.chemicals.intf.ProductSourceProvider, org.openmetadatainitiative.openminds.v3.ephys.activity.intf.ElectrodePlacementPerformedBy, org.openmetadatainitiative.openminds.v3.ephys.activity.intf.CellPatchingPerformedBy, org.openmetadatainitiative.openminds.v3.ephys.activity.intf.RecordingActivityPerformedBy, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeManufacturer, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeOwner, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeArrayManufacturer, org.openmetadatainitiative.openminds.v3.ephys.device.intf.ElectrodeArrayOwner, org.openmetadatainitiative.openminds.v3.ephys.device.intf.PipetteManufacturer, org.openmetadatainitiative.openminds.v3.ephys.device.intf.PipetteOwner, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.BrainAtlasVersionAuthor, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.BrainAtlasVersionCustodian, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.BrainAtlasAuthor, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.BrainAtlasCustodian, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.CommonCoordinateSpaceAuthor, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.CommonCoordinateSpaceCustodian, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.CommonCoordinateSpaceVersionAuthor, org.openmetadatainitiative.openminds.v3.SANDS.atlas.intf.CommonCoordinateSpaceVersionCustodian, org.openmetadatainitiative.openminds.v3.core.research.intf.ProtocolExecutionPerformedBy, org.openmetadatainitiative.openminds.v3.core.actors.intf.ContributionContributor, org.openmetadatainitiative.openminds.v3.core.products.intf.SoftwareCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.SoftwareDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.ModelCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.ModelDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.WebServiceCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.WebServiceDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.SetupManufacturer, org.openmetadatainitiative.openminds.v3.core.products.intf.SoftwareVersionCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.SoftwareVersionDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.MetaDataModelCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.MetaDataModelDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.ProjectCoordinator, org.openmetadatainitiative.openminds.v3.core.products.intf.WebServiceVersionCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.WebServiceVersionDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.ModelVersionCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.ModelVersionDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.DatasetAuthor, org.openmetadatainitiative.openminds.v3.core.products.intf.DatasetCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.MetaDataModelVersionCustodian, org.openmetadatainitiative.openminds.v3.core.products.intf.MetaDataModelVersionDeveloper, org.openmetadatainitiative.openminds.v3.core.products.intf.DatasetVersionAuthor, org.openmetadatainitiative.openminds.v3.core.products.intf.DatasetVersionCustodian, org.openmetadatainitiative.openminds.v3.core.miscellaneous.intf.FundingFunder, org.openmetadatainitiative.openminds.v3.core.data.intf.CopyrightHolder, org.openmetadatainitiative.openminds.v3.specimenPrep.activity.intf.CranialWindowPreparationPerformedBy, org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceManufacturer, org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceOwner, org.openmetadatainitiative.openminds.v3.stimulation.activity.intf.StimulationActivityPerformedBy{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/Person";

    @JsonIgnore
    public Reference<Person> getReference() {
        return doGetReference();
    }

    public static Reference<Person> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private Person(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<Person>{
        
        public Builder affiliation(List<Affiliation> affiliation) { Person.this.affiliation = affiliation; return this; }
        
        public Builder alternateName(List<String> alternateName) { Person.this.alternateName = alternateName; return this; }
        
        public Builder associatedAccount(List<Reference<AccountInformation>> associatedAccount) { Person.this.associatedAccount = associatedAccount; return this; }
        
        public Builder contactInformation(Reference<ContactInformation> contactInformation) { Person.this.contactInformation = contactInformation; return this; }
        
        public Builder digitalIdentifier(List<Reference<ORCID>> digitalIdentifier) { Person.this.digitalIdentifier = digitalIdentifier; return this; }
        
        public Builder familyName(String familyName) { Person.this.familyName = familyName; return this; }
        
        public Builder givenName(String givenName) { Person.this.givenName = givenName; return this; }
        

        public Person build() {
            if (Person.this.id == null) {
                Person.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(Person.this.types == null || Person.this.types.isEmpty() || !Person.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = Person.this.types;
                Person.this.types = new ArrayList<>();
                Person.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    Person.this.types.addAll(oldValues);
                }
            }
            return Person.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/affiliation")
    private List<Affiliation> affiliation;
    
    /**
    * Declaration of a person being closely associated to an organization.
    */
    public List<Affiliation> getAffiliation() {
       return this.affiliation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/alternateName")
    private List<String> alternateName;
    
    public List<String> getAlternateName() {
       return this.alternateName;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/associatedAccount")
    private List<Reference<AccountInformation>> associatedAccount;
    
    public List<Reference<AccountInformation>> getAssociatedAccount() {
       return this.associatedAccount;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/contactInformation")
    private Reference<ContactInformation> contactInformation;
    
    /**
    * Any available way used to contact a person or business (e.g., address, phone number, email address, etc.).
    */
    public Reference<ContactInformation> getContactInformation() {
       return this.contactInformation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/digitalIdentifier")
    private List<Reference<ORCID>> digitalIdentifier;
    
    /**
    * Digital handle to identify objects or legal persons.
    */
    public List<Reference<ORCID>> getDigitalIdentifier() {
       return this.digitalIdentifier;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/familyName")
    private String familyName;
    
    /**
    * Name borne in common by members of a family.
    */
    public String getFamilyName() {
       return this.familyName;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/givenName")
    private String givenName;
    
    /**
    * Name given to a person, including all potential middle names, but excluding the family name.
    */
    public String getGivenName() {
       return this.givenName;
    }

 
    public static Person.Builder create(LocalId localId){
        return new Person(localId).new Builder();
    }

    public Person.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, Person.class).new Builder();
    }
}