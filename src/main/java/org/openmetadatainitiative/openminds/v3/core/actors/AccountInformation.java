package org.openmetadatainitiative.openminds.v3.core.actors;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.core.products.WebService;


import static org.openmetadatainitiative.openminds.v3.core.actors.AccountInformation.SEMANTIC_NAME;
/**
 * Structured information about a user account for a web service.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class AccountInformation extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/core/AccountInformation";

    @JsonIgnore
    public Reference<AccountInformation> getReference() {
        return doGetReference();
    }

    public static Reference<AccountInformation> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private AccountInformation(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<AccountInformation>{
        
        public Builder service(Reference<WebService> service) { AccountInformation.this.service = service; return this; }
        
        public Builder userName(String userName) { AccountInformation.this.userName = userName; return this; }
        

        public AccountInformation build() {
            if (AccountInformation.this.id == null) {
                AccountInformation.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(AccountInformation.this.types == null || AccountInformation.this.types.isEmpty() || !AccountInformation.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = AccountInformation.this.types;
                AccountInformation.this.types = new ArrayList<>();
                AccountInformation.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    AccountInformation.this.types.addAll(oldValues);
                }
            }
            return AccountInformation.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/service")
    private Reference<WebService> service;
    
    public Reference<WebService> getService() {
       return this.service;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/userName")
    private String userName;
    
    public String getUserName() {
       return this.userName;
    }

 
    public static AccountInformation.Builder create(LocalId localId){
        return new AccountInformation(localId).new Builder();
    }

    public AccountInformation.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, AccountInformation.class).new Builder();
    }
}