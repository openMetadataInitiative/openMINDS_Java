package org.openmetadatainitiative.openminds.v3.SANDS.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.SANDS.miscellaneous.CoordinatePoint;
import org.openmetadatainitiative.openminds.v3.SANDS.miscellaneous.intf.ViewerSpecificationPreferredDisplayColor;
import org.openmetadatainitiative.openminds.v3.core.miscellaneous.QuantitativeValue;


import static org.openmetadatainitiative.openminds.v3.SANDS.miscellaneous.ViewerSpecification.*;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class ViewerSpecification extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/sands/ViewerSpecification";

    @JsonIgnore
    public Reference<ViewerSpecification> getReference() {
        return doGetReference();
    }

    public static Reference<ViewerSpecification> createReference(InstanceId instanceId) {
        return new Reference<>(instanceId);
    }

    private ViewerSpecification(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<ViewerSpecification>{
        
        public Builder additionalRemarks(String additionalRemarks) { ViewerSpecification.this.additionalRemarks = additionalRemarks; return this; }
        
        public Builder anchorPoint(List<QuantitativeValue> anchorPoint) { ViewerSpecification.this.anchorPoint = anchorPoint; return this; }
        
        public Builder cameraPosition(CoordinatePoint cameraPosition) { ViewerSpecification.this.cameraPosition = cameraPosition; return this; }
        
        public Builder preferredDisplayColor(Reference<? extends ViewerSpecificationPreferredDisplayColor> preferredDisplayColor) { ViewerSpecification.this.preferredDisplayColor = preferredDisplayColor; return this; }
        

        public ViewerSpecification build() {
            if (ViewerSpecification.this.id == null) {
                ViewerSpecification.this.id = new InstanceId(UUID.randomUUID().toString());
            }
            if(ViewerSpecification.this.types == null || ViewerSpecification.this.types.isEmpty() || !ViewerSpecification.this.types.contains(SEMANTIC_NAME)){
                final List<String> oldValues = ViewerSpecification.this.types;
                ViewerSpecification.this.types = new ArrayList<>();
                ViewerSpecification.this.types.add(SEMANTIC_NAME);
                if(oldValues != null){
                    ViewerSpecification.this.types.addAll(oldValues);
                }
            }
            return ViewerSpecification.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/additionalRemarks")
    private String additionalRemarks;
    
    /**
    * Mention of what deserves additional attention or notice.
    */
    public String getAdditionalRemarks() {
       return this.additionalRemarks;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/anchorPoint")
    private List<QuantitativeValue> anchorPoint;
    
    public List<QuantitativeValue> getAnchorPoint() {
       return this.anchorPoint;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/cameraPosition")
    private CoordinatePoint cameraPosition;
    
    public CoordinatePoint getCameraPosition() {
       return this.cameraPosition;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/preferredDisplayColor")
    private Reference<? extends ViewerSpecificationPreferredDisplayColor> preferredDisplayColor;
    
    public Reference<? extends ViewerSpecificationPreferredDisplayColor> getPreferredDisplayColor() {
       return this.preferredDisplayColor;
    }

 
    public static ViewerSpecification.Builder create(LocalId localId){
        return new ViewerSpecification(localId).new Builder();
    }

    public ViewerSpecification.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, ViewerSpecification.class).new Builder();
    }
}