package org.openmetadatainitiative.openminds.v3.specimenPrep.activity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.chemicals.ChemicalMixture;
import org.openmetadatainitiative.openminds.v3.controlledTerms.CellCultureType;
import org.openmetadatainitiative.openminds.v3.core.research.TissueSampleState;
import org.openmetadatainitiative.openminds.v3.specimenPrep.activity.intf.TissueCulturePreparationInput;


import static org.openmetadatainitiative.openminds.v3.specimenPrep.activity.TissueCulturePreparation.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class TissueCulturePreparation extends Instance {
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/specimenPrep/TissueCulturePreparation";

    @JsonIgnore
    public Reference<TissueCulturePreparation> getReference() {
        return doGetReference();
    }

    public static Reference<TissueCulturePreparation> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private TissueCulturePreparation(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<TissueCulturePreparation>{
        
        public Builder cultureMedium(Reference<ChemicalMixture> cultureMedium) { TissueCulturePreparation.this.cultureMedium = cultureMedium; return this; }
        
        public Builder cultureType(Reference<CellCultureType> cultureType) { TissueCulturePreparation.this.cultureType = cultureType; return this; }
        
        public Builder input(Reference<? extends TissueCulturePreparationInput> input) { TissueCulturePreparation.this.input = input; return this; }
        
        public Builder output(Reference<TissueSampleState> output) { TissueCulturePreparation.this.output = output; return this; }
        

        public TissueCulturePreparation build(OpenMINDSContext context) {
            if (TissueCulturePreparation.this.id == null) {
                TissueCulturePreparation.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            TissueCulturePreparation.this.atType = SEMANTIC_NAME;
            return TissueCulturePreparation.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/cultureMedium")
    private Reference<ChemicalMixture> cultureMedium;
    
    public Reference<ChemicalMixture> getCultureMedium() {
       return this.cultureMedium;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/cultureType")
    private Reference<CellCultureType> cultureType;
    
    public Reference<CellCultureType> getCultureType() {
       return this.cultureType;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/input")
    private Reference<? extends TissueCulturePreparationInput> input;
    
    /**
    * Something or someone that is put into or participates in a process or machine.
    */
    public Reference<? extends TissueCulturePreparationInput> getInput() {
       return this.input;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/output")
    private Reference<TissueSampleState> output;
    
    /**
    * Something or someone that comes out of, is delivered or produced by a process or machine.
    */
    public Reference<TissueSampleState> getOutput() {
       return this.output;
    }

 
    public static TissueCulturePreparation.Builder create(LocalId localId){
        return new TissueCulturePreparation(localId).new Builder();
    }

    public TissueCulturePreparation.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, TissueCulturePreparation.class).new Builder();
    }
}