package org.openmetadatainitiative.openminds.v3.specimenPrep.device;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v3.controlledTerms.AnatomicalPlane;
import org.openmetadatainitiative.openminds.v3.core.miscellaneous.QuantitativeValue;
import org.openmetadatainitiative.openminds.v3.specimenPrep.device.SlicingDevice;
import org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageMetadataLocation;
import org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageSliceThickness;
import org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageSlicingAngle;
import org.openmetadatainitiative.openminds.v3.specimenPrep.device.intf.SlicingDeviceUsageUsedSpecimen;


import static org.openmetadatainitiative.openminds.v3.specimenPrep.device.SlicingDeviceUsage.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class SlicingDeviceUsage extends Instance implements org.openmetadatainitiative.openminds.v3.ephys.activity.intf.ElectrodePlacementDevice, org.openmetadatainitiative.openminds.v3.ephys.activity.intf.CellPatchingDevice, org.openmetadatainitiative.openminds.v3.ephys.entity.intf.RecordingRecordedWith, org.openmetadatainitiative.openminds.v3.core.data.intf.MeasurementMeasuredWith{
    static final String SEMANTIC_NAME = "https://openminds.ebrains.eu/specimenPrep/SlicingDeviceUsage";

    @JsonIgnore
    public Reference<SlicingDeviceUsage> getReference() {
        return doGetReference();
    }

    public static Reference<SlicingDeviceUsage> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private SlicingDeviceUsage(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<SlicingDeviceUsage>{
        
        public Builder device(Reference<SlicingDevice> device) { SlicingDeviceUsage.this.device = device; return this; }
        
        public Builder lookupLabel(String lookupLabel) { SlicingDeviceUsage.this.lookupLabel = lookupLabel; return this; }
        
        public Builder metadataLocation(List<Reference<? extends SlicingDeviceUsageMetadataLocation>> metadataLocation) { SlicingDeviceUsage.this.metadataLocation = metadataLocation; return this; }
        
        public Builder oscillationAmplitude(QuantitativeValue oscillationAmplitude) { SlicingDeviceUsage.this.oscillationAmplitude = oscillationAmplitude; return this; }
        
        public Builder sliceThickness(SlicingDeviceUsageSliceThickness sliceThickness) { SlicingDeviceUsage.this.sliceThickness = sliceThickness; return this; }
        
        public Builder slicingAngle(List<? extends SlicingDeviceUsageSlicingAngle> slicingAngle) { SlicingDeviceUsage.this.slicingAngle = slicingAngle; return this; }
        
        public Builder slicingPlane(Reference<AnatomicalPlane> slicingPlane) { SlicingDeviceUsage.this.slicingPlane = slicingPlane; return this; }
        
        public Builder slicingSpeed(QuantitativeValue slicingSpeed) { SlicingDeviceUsage.this.slicingSpeed = slicingSpeed; return this; }
        
        public Builder usedSpecimen(Reference<? extends SlicingDeviceUsageUsedSpecimen> usedSpecimen) { SlicingDeviceUsage.this.usedSpecimen = usedSpecimen; return this; }
        
        public Builder vibrationFrequency(QuantitativeValue vibrationFrequency) { SlicingDeviceUsage.this.vibrationFrequency = vibrationFrequency; return this; }
        

        public SlicingDeviceUsage build(OpenMINDSContext context) {
            if (SlicingDeviceUsage.this.id == null) {
                SlicingDeviceUsage.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), context.idPrefix());
            }
            SlicingDeviceUsage.this.type = SEMANTIC_NAME;
            return SlicingDeviceUsage.this;
        }
    }

   @JsonProperty(value = "https://openminds.ebrains.eu/vocab/device")
    private Reference<SlicingDevice> device;
    
    /**
    * Piece of equipment or mechanism (hardware) designed to serve a special purpose or perform a special function.
    */
    public Reference<SlicingDevice> getDevice() {
       return this.device;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/metadataLocation")
    private List<Reference<? extends SlicingDeviceUsageMetadataLocation>> metadataLocation;
    
    public List<Reference<? extends SlicingDeviceUsageMetadataLocation>> getMetadataLocation() {
       return this.metadataLocation;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/oscillationAmplitude")
    private QuantitativeValue oscillationAmplitude;
    
    public QuantitativeValue getOscillationAmplitude() {
       return this.oscillationAmplitude;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/sliceThickness")
    private SlicingDeviceUsageSliceThickness sliceThickness;
    
    public SlicingDeviceUsageSliceThickness getSliceThickness() {
       return this.sliceThickness;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/slicingAngle")
    private List<? extends SlicingDeviceUsageSlicingAngle> slicingAngle;
    
    public List<? extends SlicingDeviceUsageSlicingAngle> getSlicingAngle() {
       return this.slicingAngle;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/slicingPlane")
    private Reference<AnatomicalPlane> slicingPlane;
    
    public Reference<AnatomicalPlane> getSlicingPlane() {
       return this.slicingPlane;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/slicingSpeed")
    private QuantitativeValue slicingSpeed;
    
    public QuantitativeValue getSlicingSpeed() {
       return this.slicingSpeed;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/usedSpecimen")
    private Reference<? extends SlicingDeviceUsageUsedSpecimen> usedSpecimen;
    
    public Reference<? extends SlicingDeviceUsageUsedSpecimen> getUsedSpecimen() {
       return this.usedSpecimen;
    }

    @JsonProperty(value = "https://openminds.ebrains.eu/vocab/vibrationFrequency")
    private QuantitativeValue vibrationFrequency;
    
    public QuantitativeValue getVibrationFrequency() {
       return this.vibrationFrequency;
    }

 
    public static SlicingDeviceUsage.Builder create(LocalId localId){
        return new SlicingDeviceUsage(localId).new Builder();
    }

    public SlicingDeviceUsage.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, SlicingDeviceUsage.class).new Builder();
    }
}