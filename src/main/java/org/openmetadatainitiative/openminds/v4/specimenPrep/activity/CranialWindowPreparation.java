package org.openmetadatainitiative.openminds.v4.specimenPrep.activity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v4.controlledTerms.CranialWindowConstructionType;
import org.openmetadatainitiative.openminds.v4.controlledTerms.CranialWindowReinforcementType;
import org.openmetadatainitiative.openminds.v4.controlledTerms.PreparationType;
import org.openmetadatainitiative.openminds.v4.core.products.DatasetVersion;
import org.openmetadatainitiative.openminds.v4.core.research.CustomPropertySet;
import org.openmetadatainitiative.openminds.v4.core.research.Protocol;
import org.openmetadatainitiative.openminds.v4.core.research.SubjectState;
import org.openmetadatainitiative.openminds.v4.specimenPrep.activity.intf.CranialWindowPreparationDimension;
import org.openmetadatainitiative.openminds.v4.specimenPrep.activity.intf.CranialWindowPreparationPerformedBy;
import org.openmetadatainitiative.openminds.v4.specimenPrep.activity.intf.CranialWindowPreparationStudyTarget;


import static org.openmetadatainitiative.openminds.v4.specimenPrep.activity.CranialWindowPreparation.SEMANTIC_NAME;
/**
 * 
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class CranialWindowPreparation extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.V4.Entity{
    public static final String SEMANTIC_NAME = "https://openminds.om-i.org/types/CranialWindowPreparation";

    @JsonIgnore
    public Reference<CranialWindowPreparation> getReference() {
        return doGetReference();
    }

    public static Reference<CranialWindowPreparation> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private CranialWindowPreparation() {
        this(null);
    }

    private CranialWindowPreparation(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    

    
    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<CranialWindowPreparation>{
        public Builder constructionType(Reference<CranialWindowConstructionType> constructionType) { CranialWindowPreparation.this.constructionType = constructionType; return this; }
        public Builder customPropertySet(List<Function<CustomPropertySet.EmbeddedBuilder, CustomPropertySet>> customPropertySet) { CranialWindowPreparation.this.customPropertySet = customPropertySet.stream().map(b -> b.apply(CustomPropertySet.createEmbedded())).toList(); return this; }
        public Builder description(String description) { CranialWindowPreparation.this.description = description; return this; }
        public Builder dimension(Function<CranialWindowPreparationDimension.EmbeddedBuilder, CranialWindowPreparationDimension> dimension) { CranialWindowPreparation.this.dimension = dimension.apply(CranialWindowPreparationDimension.createEmbedded()); return this; }
        public Builder endTime(String endTime) { CranialWindowPreparation.this.endTime = endTime; return this; }
        public Builder input(List<Reference<SubjectState>> input) { CranialWindowPreparation.this.input = input; return this; }
        public Builder isPartOf(Reference<DatasetVersion> isPartOf) { CranialWindowPreparation.this.isPartOf = isPartOf; return this; }
        public Builder lookupLabel(String lookupLabel) { CranialWindowPreparation.this.lookupLabel = lookupLabel; return this; }
        public Builder output(List<Reference<SubjectState>> output) { CranialWindowPreparation.this.output = output; return this; }
        public Builder performedBy(List<Reference<? extends CranialWindowPreparationPerformedBy>> performedBy) { CranialWindowPreparation.this.performedBy = performedBy; return this; }
        public Builder preparationDesign(Reference<PreparationType> preparationDesign) { CranialWindowPreparation.this.preparationDesign = preparationDesign; return this; }
        public Builder protocol(List<Reference<Protocol>> protocol) { CranialWindowPreparation.this.protocol = protocol; return this; }
        public Builder reinforcementType(Reference<CranialWindowReinforcementType> reinforcementType) { CranialWindowPreparation.this.reinforcementType = reinforcementType; return this; }
        public Builder startTime(String startTime) { CranialWindowPreparation.this.startTime = startTime; return this; }
        public Builder studyTarget(List<Reference<? extends CranialWindowPreparationStudyTarget>> studyTarget) { CranialWindowPreparation.this.studyTarget = studyTarget; return this; }
        

        public CranialWindowPreparation build(OpenMINDSContext context) {
            CranialWindowPreparation.super.build(context);
            return CranialWindowPreparation.this;
        }
    }

    public static CranialWindowPreparation.Builder create(LocalId localId){
        return new CranialWindowPreparation(localId).new Builder();
    }

    public CranialWindowPreparation.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, CranialWindowPreparation.class).new Builder();
    }
    

   @JsonProperty(value = "https://openminds.om-i.org/props/constructionType")
    private Reference<CranialWindowConstructionType> constructionType;
    
    public Reference<CranialWindowConstructionType> getConstructionType() {
       return this.constructionType;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/customPropertySet")
    private List<CustomPropertySet> customPropertySet;
    
    public List<CustomPropertySet> getCustomPropertySet() {
       return this.customPropertySet;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/description")
    private String description;
    
    /**
    * Longer statement or account giving the characteristics of someone or something.
    */
    public String getDescription() {
       return this.description;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/dimension")
    private CranialWindowPreparationDimension dimension;
    
    public CranialWindowPreparationDimension getDimension() {
       return this.dimension;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/endTime")
    private String endTime;
    
    public String getEndTime() {
       return this.endTime;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/input")
    private List<Reference<SubjectState>> input;
    
    /**
    * Something or someone that is put into or participates in a process or machine.
    */
    public List<Reference<SubjectState>> getInput() {
       return this.input;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/isPartOf")
    private Reference<DatasetVersion> isPartOf;
    
    /**
    * Reference to the ensemble of multiple things or beings.
    */
    public Reference<DatasetVersion> getIsPartOf() {
       return this.isPartOf;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/lookupLabel")
    private String lookupLabel;
    
    public String getLookupLabel() {
       return this.lookupLabel;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/output")
    private List<Reference<SubjectState>> output;
    
    /**
    * Something or someone that comes out of, is delivered or produced by a process or machine.
    */
    public List<Reference<SubjectState>> getOutput() {
       return this.output;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/performedBy")
    private List<Reference<? extends CranialWindowPreparationPerformedBy>> performedBy;
    
    public List<Reference<? extends CranialWindowPreparationPerformedBy>> getPerformedBy() {
       return this.performedBy;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/preparationDesign")
    private Reference<PreparationType> preparationDesign;
    
    public Reference<PreparationType> getPreparationDesign() {
       return this.preparationDesign;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/protocol")
    private List<Reference<Protocol>> protocol;
    
    /**
    * Plan that describes the process of a scientific or medical experiment, treatment, or procedure.
    */
    public List<Reference<Protocol>> getProtocol() {
       return this.protocol;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/reinforcementType")
    private Reference<CranialWindowReinforcementType> reinforcementType;
    
    public Reference<CranialWindowReinforcementType> getReinforcementType() {
       return this.reinforcementType;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/startTime")
    private String startTime;
    
    public String getStartTime() {
       return this.startTime;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/studyTarget")
    private List<Reference<? extends CranialWindowPreparationStudyTarget>> studyTarget;
    
    /**
    * Structure or function that was targeted within a study.
    */
    public List<Reference<? extends CranialWindowPreparationStudyTarget>> getStudyTarget() {
       return this.studyTarget;
    }

 

}