package org.openmetadatainitiative.openminds.v4.core.miscellaneous;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude;
import org.openmetadatainitiative.openminds.utils.*;
import java.util.function.Function;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.openmetadatainitiative.openminds.v4.controlledTerms.TypeOfUncertainty;
import org.openmetadatainitiative.openminds.v4.controlledTerms.UnitOfMeasurement;


import static org.openmetadatainitiative.openminds.v4.core.miscellaneous.QuantitativeValueArray.SEMANTIC_NAME;
/**
 * A representation of an array of quantitative values, optionally with uncertainties.
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@SuppressWarnings("unused")
public class QuantitativeValueArray extends Instance implements org.openmetadatainitiative.openminds.OpenMINDS.V4.Entity{
    public static final String SEMANTIC_NAME = "https://openminds.om-i.org/types/QuantitativeValueArray";

    @JsonIgnore
    public Reference<QuantitativeValueArray> getReference() {
        return doGetReference();
    }

    public static Reference<QuantitativeValueArray> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    /** For deserialization **/
    private QuantitativeValueArray() {
        this(null);
    }

    private QuantitativeValueArray(LocalId localId ) {
        super(localId, SEMANTIC_NAME);
    }

    

    
    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<QuantitativeValueArray>{
        public Builder negativeUncertainties(List<Double> negativeUncertainties) { QuantitativeValueArray.this.negativeUncertainties = negativeUncertainties; return this; }
        public Builder positiveUncertainties(List<Double> positiveUncertainties) { QuantitativeValueArray.this.positiveUncertainties = positiveUncertainties; return this; }
        public Builder typeOfUncertainty(Reference<TypeOfUncertainty> typeOfUncertainty) { QuantitativeValueArray.this.typeOfUncertainty = typeOfUncertainty; return this; }
        public Builder unit(Reference<UnitOfMeasurement> unit) { QuantitativeValueArray.this.unit = unit; return this; }
        public Builder values(List<Double> values) { QuantitativeValueArray.this.values = values; return this; }
        

        public QuantitativeValueArray build(OpenMINDSContext context) {
            QuantitativeValueArray.super.build(context);
            return QuantitativeValueArray.this;
        }
    }

    public static QuantitativeValueArray.Builder create(LocalId localId){
        return new QuantitativeValueArray(localId).new Builder();
    }

    public QuantitativeValueArray.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, QuantitativeValueArray.class).new Builder();
    }
    

   @JsonProperty(value = "https://openminds.om-i.org/props/negativeUncertainties")
    private List<Double> negativeUncertainties;
    
    public List<Double> getNegativeUncertainties() {
       return this.negativeUncertainties;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/positiveUncertainties")
    private List<Double> positiveUncertainties;
    
    public List<Double> getPositiveUncertainties() {
       return this.positiveUncertainties;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/typeOfUncertainty")
    private Reference<TypeOfUncertainty> typeOfUncertainty;
    
    /**
    * Distinct technique used to quantify the uncertainty of a measurement.
    */
    public Reference<TypeOfUncertainty> getTypeOfUncertainty() {
       return this.typeOfUncertainty;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/unit")
    private Reference<UnitOfMeasurement> unit;
    
    /**
    * Determinate quantity adopted as a standard of measurement.
    */
    public Reference<UnitOfMeasurement> getUnit() {
       return this.unit;
    }

    @JsonProperty(value = "https://openminds.om-i.org/props/values")
    private List<Double> values;
    
    public List<Double> getValues() {
       return this.values;
    }

 

}