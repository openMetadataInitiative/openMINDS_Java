package {{package_name}};

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openmetadatainitiative.openminds.utils.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

{% for import in imports %}import {{import}};
{% endfor %}

import static {{package_name}}.{{ class_name }}.SEMANTIC_NAME;
/**
 {{java_doc}}
 *
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@InstanceType(SEMANTIC_NAME)
@JsonIgnoreProperties(ignoreUnknown = true)
public class {{ class_name }} extends Instance {% if implemented_interfaces %}implements {{ implemented_interfaces|join(', ') }}{% endif %}{
    static final String SEMANTIC_NAME = "{{ type }}";

    @JsonIgnore
    public Reference<{{ class_name }}> getReference() {
        return doGetReference();
    }

    public static Reference<{{ class_name }}> reference(String instanceId) {
        return new Reference<>(new InstanceId(instanceId));
    }

    private {{ class_name }}(LocalId localId ) {
        super(localId);
    }


    public class Builder implements org.openmetadatainitiative.openminds.utils.Builder<{{ class_name }}>{
        {% for property in properties %}{% for line in builder_for_properties[property] %}
        {{ line }}
        {% endfor %}{% endfor %}

        public {{ class_name }} build(OpenMINDSContext context) {
            if ({{ class_name }}.this.id == null) {
                {{ class_name }}.this.id = InstanceId.withPrefix(UUID.randomUUID().toString(), openMINDSContext.idPrefix());
            }
            {{ class_name }}.this.type = SEMANTIC_NAME;
            return {{ class_name }}.this;
        }
    }

{% for property in properties %}   @JsonProperty(value = "{%if property in absolute_property_translations%}{{absolute_property_translations[property]}}{%else%}{{property}}{%endif%}")
    {{member_for_properties[property]}}
    {%if property in property_descriptions and property_descriptions[property] %}
    /**
    * {{property_descriptions[property]}}
    */{% endif %}
    {{getter_for_properties[property]}}

 {% endfor %}
    public static {{ class_name }}.Builder create(LocalId localId){
        return new {{ class_name }}(localId).new Builder();
    }

    public {{ class_name }}.Builder copy(){
        return ParsingUtils.OBJECT_MAPPER.convertValue(this, {{ class_name }}.class).new Builder();
    }
}
