package org.openmetadatainitiative.openminds;

import org.openmetadatainitiative.openminds.utils.Instance;
import org.openmetadatainitiative.openminds.utils.OpenMINDSContext;
import org.openmetadatainitiative.openminds.utils.ParsingUtils;
import org.openmetadatainitiative.openminds.utils.LocalId;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

/**
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
public class OpenMINDS {

    private final OpenMINDSContext context;

    private OpenMINDS(OpenMINDSContext context){
        this.context = context;
    }

    private static void persist(String targetDirectory, Stream<Instance> instances){
        File dir = new File(targetDirectory);
        if(!dir.exists()){
            dir.mkdirs();
        }
        instances.forEach(i -> {
            File f = new File(targetDirectory+File.separator+i.getLocalId().id()+".jsonld");
            try {
                ParsingUtils.OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValue(f, i);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
    }

    {% for version in relevant_versions %}public static OpenMINDS.{{version[0]|upper}}{{version[1:]}} {{version}}(){
        return {{version}}(OpenMINDSContext.defaultContext());
    }

    public static OpenMINDS.{{version[0]|upper}}{{version[1:]}} {{version}}(String idPrefix){
        return {{version}}(new OpenMINDSContext(idPrefix, true));
    }

    private static OpenMINDS.{{version[0]|upper}}{{version[1:]}} {{version}}(OpenMINDSContext context) {
        return new OpenMINDS(context).new {{version[0]|upper}}{{version[1:]}}();
    }

    public final class {{version[0]|upper}}{{version[1:]}} {
        private {{version[0]|upper}}{{version[1:]}}(){}
        private final List<org.openmetadatainitiative.openminds.utils.Builder<?>> builders = new ArrayList<>();

        {% for package in packages_by_version[version].keys() %}public final OpenMINDS.{{version[0]|upper}}{{version[1:]}}.{{package[0]|upper}}{{package[1:]}} {{package}} = new {{package[0]|upper}}{{package[1:]}}();

        public final class {{package[0]|upper}}{{package[1:]}}{
            private {{package[0]|upper}}{{package[1:]}}(){}
            {% for class in packages_by_version[version][package] %}
            public {{class[1]}}.Builder create{{class[0]}}(String localId){
                final {{class[1]}}.Builder builder = {{class[1]}}.create(new LocalId(localId));
                builders.add(builder);
                return builder;
            }
            {% endfor %}
        }
        {% endfor %}

        public void flush(PostProcessor postProcessor){
            flush(OpenMINDSContext.defaultContext(), postProcessor);
        }

        public void flush(OpenMINDSContext context, PostProcessor postProcessor){
            postProcessor.process(builders.stream().map(b -> b.build(context)));
        }
    }
    {% endfor %}
}
