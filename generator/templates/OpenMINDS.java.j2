package org.openmetadatainitiative.openminds;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.openmetadatainitiative.openminds.utils.OpenMINDSContext;
import org.openmetadatainitiative.openminds.utils.LocalId;
import org.openmetadatainitiative.openminds.utils.ParsingUtils;
import org.openmetadatainitiative.openminds.utils.PostProcessor;

import java.util.ArrayList;
import java.util.List;

/**
 * ATTENTION! This is an autogenerated file based on the openMINDS schema - do not apply manual changes since they are going to be overwritten.
 */
@SuppressWarnings("unused")
public class OpenMINDS {

    public static class UnknownEntity{}

    private OpenMINDS(){}

    {% for version in relevant_versions|sort %}public static OpenMINDS.{{version[0]|upper}}{{version[1:]}} {{version}}() {
        return new {{version[0]|upper}}{{version[1:]}}();
    }

    public static final class {{version[0]|upper}}{{version[1:]}} {
        private {{version[0]|upper}}{{version[1:]}}(){}
        @JsonTypeInfo(
                use = JsonTypeInfo.Id.NAME,
                defaultImpl = UnknownEntity.class
        )
        @JsonSubTypes({
                {% for package in packages_by_version[version].keys()|sort %}{% for class in packages_by_version[version][package] | sort %}{%if class[2] not in embedded_only %}@JsonSubTypes.Type(value = {{class[1]}}.class, name = {{class[1]}}.SEMANTIC_NAME),
                {% endif %}{% endfor %}{% endfor %}
        })
        public interface Entity {
        }

        public <T extends Entity> T load(String payload) throws JsonProcessingException {
            return (T) ParsingUtils.OBJECT_MAPPER.readValue(payload, Entity.class);
        }

        private final List<org.openmetadatainitiative.openminds.utils.Builder<?>> builders = new ArrayList<>();

        {% for package in packages_by_version[version].keys()|sort %}public final OpenMINDS.{{version[0]|upper}}{{version[1:]}}.{{package[0]|upper}}{{package[1:]}} {{package}} = new {{package[0]|upper}}{{package[1:]}}();

        public final class {{package[0]|upper}}{{package[1:]}}{
            private {{package[0]|upper}}{{package[1:]}}(){}
            {% for class in packages_by_version[version][package] | sort %}{%if class[2] not in embedded_only %}
            public {{class[1]}}.Builder create{{class[0]}}(String localId){
                final {{class[1]}}.Builder builder = {{class[1]}}.create(new LocalId(localId));
                builders.add(builder);
                return builder;
            }
            {% endif %}{% endfor %}
        }
        {% endfor %}

        public void flush(PostProcessor postProcessor){
            flush(OpenMINDSContext.defaultContext(), postProcessor);
        }

        public void flush(OpenMINDSContext context, PostProcessor postProcessor){
            postProcessor.process(builders.stream().map(b -> b.build(context)));
        }
    }
    {% endfor %}
}
